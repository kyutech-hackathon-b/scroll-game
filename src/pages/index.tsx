import { Modal } from "@mantine/core";
import Head from "next/head";
import { useCallback, useEffect, useState } from "react";
import { Unity, useUnityContext } from "react-unity-webgl";
import { WalletConnect } from "../component/WalletConnect";
import { useMintNFT } from "../hook/MintNFT";

export default function Home() {
  const { send } = useMintNFT();
  const { unityProvider, isLoaded } = useUnityContext({
    loaderUrl: "/Build/kyutechHack.loader.js",
    dataUrl: "/Build/kyutechHack.data",
    frameworkUrl: "/Build/kyutechHack.framework.js",
    codeUrl: "/Build/kyutechHack.wasm",
    webglContextAttributes: {
      preserveDrawingBuffer: true,
    },
  });
  const [devicePixelRatio, setDevicePixelRatio] = useState(0);
  const [open, setOpen] = useState<boolean>(true);

  const handleChangePixelRatio = useCallback(
    function () {
      // A function which will update the device pixel ratio of the Unity
      // Application to match the device pixel ratio of the browser.
      const updateDevicePixelRatio = function () {
        setDevicePixelRatio(window.devicePixelRatio);
      };
      // A media matcher which watches for changes in the device pixel ratio.
      const mediaMatcher = window.matchMedia(
        `screen and (resolution: ${devicePixelRatio}dppx)`
      );
      // Adding an event listener to the media matcher which will update the
      // device pixel ratio of the Unity Application when the device pixel
      // ratio changes.
      mediaMatcher.addEventListener("change", updateDevicePixelRatio);
      return function () {
        // Removing the event listener when the component unmounts.
        mediaMatcher.removeEventListener("change", updateDevicePixelRatio);
      };
    },
    [devicePixelRatio]
  );

  useEffect(() => {
    if (typeof window !== "undefined") {
      setDevicePixelRatio(window.devicePixelRatio);
    }
  }, []);
  const handleSubmit = async () => {
    await send("3rd", "10,000", "2022/11/21");
  };
  return (
    <div>
      <Head>
        <title>Scroll game</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header className="w-full shadow-sm shadow-black/30">
        <div className="max-w-6xl mx-auto h-[70px] px-5 flex justify-between items-center">
          <h1 className="text-transparent font-extrabold text-2xl bg-clip-text bg-gradient-to-r from-[#4158D0] via-[#C850C0] to-[#FFCC70]">
            Kyutech hackathon
          </h1>
          <WalletConnect />
        </div>
      </header>
      <main className="w-full">
        {isLoaded === false && (
          <div className="h-[calc(100vh-70px)] w-full relative bg-black">
            <div className="spinner-box">
              <div className="blue-orbit leo"></div>

              <div className="green-orbit leo"></div>

              <div className="red-orbit leo"></div>

              <div className="white-orbit w1 leo"></div>
              <div className="white-orbit w2 leo"></div>
              <div className="white-orbit w3 leo"></div>
            </div>
          </div>
        )}
        <Unity
          unityProvider={unityProvider}
          style={{
            height: "calc(100vh - 70px)",
            width: "100%",
          }}
          devicePixelRatio={devicePixelRatio}
        />
        <Modal
          opened={open}
          onClose={() => setOpen(false)}
          title="Introduce yourself!"
        >
          {/* Modal content */}
        </Modal>
      </main>
    </div>
  );
}
